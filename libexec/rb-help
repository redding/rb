#!/usr/bin/env bash

command="$1"
if [ -z $command ]; then

  cat <<USAGE
'$RB_RELEASE' release

usage: rb @[<version>]
       rb -f FILE
       rb exec [@<version>] [-f FILE] -- COMMAND
       rb each -- COMMAND
       rb help [CMD]
       rb status
       rb list
       rb init [--auto] [--quiet]
       rb --version

More Info:
  https://github.com/redding/rb/blob/$RB_RELEASE/README.md
USAGE
  exit 0

else

  if [[ "$command" == "exec" ]]; then

    cat <<USAGE
Execute a command using a specific ruby version

usage: rb exec -- COMMAND
       rb exec @<version> -- COMMAND
       rb exec -f FILE -- COMMAND
USAGE
    exit 0

  elif [[ "$command" == "each" ]]; then

    cat <<USAGE
Execute (rb exec) a command across all installed ruby versions

usage: rb each -- COMMAND
USAGE
    exit 0

  elif [[ "$command" == "help" ]]; then

    cat <<USAGE
Print command usage info.

usage: rb help
       rb help [cmd]
USAGE
    exit 0

  elif [[ "$command" == "status" ]]; then

    cat <<USAGE
Print the current version and source info

usage: rb status
USAGE
    exit 0

  elif [[ "$command" == "list" ]]; then

    cat <<USAGE
List the available versions, marking the currently active version

usage: rb list
USAGE
    exit 0

  elif [[ "$command" == "init" ]]; then

    cat <<USAGE
Output an initialization script to eval in the shell.

usage: eval "\$(rb init)"
       eval "\$(rb init [--auto] [--quiet])"
USAGE
    exit 0

  else
    echo "rb: no such command \`$command'" >&2
    exit 1
  fi

fi

