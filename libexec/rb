#!/usr/bin/env bash

export RB_RELEASE="beta3"

[ -n "$RB_RUBIES_DIR"   ] || export RB_RUBIES_DIR="$HOME/.rubies"
[ -n "$RB_VERSION_FILE" ] || export RB_VERSION_FILE=".ruby-version"
[ -n "$RB_RUBY_VERSION" ] || export RB_RUBY_VERSION=""
[ -n "$RB_RUBY_SOURCE"  ] || export RB_RUBY_SOURCE=""

_rb_path_remove () {
  export PATH="`echo $PATH | awk -v RS=: -v ORS=: '$0 != "'$1'"' | sed 's/:$//'`";
}

_rb_unset_env () {
  _rb_path_remove "$RB_RUBIES_DIR/$RUBY_VERSION/bin"
  _rb_path_remove "$RB_RUBIES_DIR/$RUBY_VERSION/lib/ruby/gems/bin"
  unset RUBY_VERSION RUBY_ROOT GEM_PATH GEM_HOME
  export RB_RUBY_VERSION=""
  export RB_RUBY_SOURCE=""
}

_rb_activate () {
  local VERSION SOURCE MSG PWD_AND_PARENTS_SEARCH_RESULT
  warn () { echo -e "$1" >&2; }
  info () { warn "$1"; }
  set_env_var () { export $1="$2"; }
  unset_env_var () { unset $1; }
  path_prepend () {
    _rb_path_remove $1
    set_env_var PATH "$1:$PATH"
  }
  read_version_from_file () {
    if [ -f "$1" ]; then
      VERSION=`head -n 1 $1 | sed 's/ //g'`
      SOURCE="from $1"
    fi
  }
  search_pwd_and_parents_for () {
    path_slashes=${PWD//[^\/]/}
    num_path_dirs="${#path_slashes}"
    path="$PWD"

    for (( n=${num_path_dirs}; n>0; --n )) do
      test -e "$path/$1" &&
        ORIG_OLDPWD="$OLDPWD" &&
        pushd "$path" > /dev/null &&
        PWD_AND_PARENTS_SEARCH_RESULT="$PWD/$1" &&
        popd > /dev/null &&
        OLDPWD="$ORIG_OLDPWD" &&
        return

      path="$path/.."
    done
  }
  set_state() {
    export RB_RUBY_VERSION="$1"
    export RB_RUBY_SOURCE="$2"
  }
  set_env () {
    local v="$RB_RUBY_VERSION"
    if [ -h "$RB_RUBIES_DIR/$RB_RUBY_VERSION" ]; then
      v=$(readlink -n "$RB_RUBIES_DIR/$RB_RUBY_VERSION" | sed 's/\/$//')
    fi
    set_env_var RUBY_VERSION "$v"
    set_env_var RUBY_ROOT    "$RB_RUBIES_DIR/$v"
    set_env_var GEM_HOME     "$RUBY_ROOT/lib/ruby/gems"
    set_env_var GEM_PATH     "$RUBY_ROOT/lib/ruby/gems"
    path_prepend "$RUBY_ROOT/lib/ruby/gems/bin"
    path_prepend "$RUBY_ROOT/bin"
  }

  # get the requested version

  if [[ $1 =~ ^@ ]]; then
    # from @<VERSION> string
    VERSION=$1; VERSION=${VERSION:1}; SOURCE="from command line";
  elif [ -f "$1" ]; then
    # from file containing VERSION string
    read_version_from_file "$1"
  fi
  if [ -z "$VERSION" ]; then
    # from pwd search .ruby-version, if present
    search_pwd_and_parents_for "$RB_VERSION_FILE"
    read_version_from_file "$PWD_AND_PARENTS_SEARCH_RESULT"
  fi
  if [ -z "$VERSION" ]; then
    # from $HOME/.ruby-version, if present
    read_version_from_file "$HOME/$RB_VERSION_FILE"
  fi
  if [ -z "$VERSION" ]; then
    # default to the system version
    VERSION="system"; SOURCE="default";
  fi

  # apply the requested version, if needed

  if [ "$SOURCE" != "$RB_RUBY_SOURCE" ] || [ "$VERSION" != "$RB_RUBY_VERSION" ]; then
    if [[ "$VERSION" == "system" ]]; then
      # system version requested, activate it
      _rb_unset_env
      set_state "$VERSION" "$SOURCE"
      MSG="Activated (system) `ruby -v`"
    elif [ ! -e "$RB_RUBIES_DIR/$VERSION" ]; then
      # requested version not installed
      warn "$VERSION was requested ($SOURCE) but is not installed.\n\nInstall it with ruby-build:"
      warn "ruby-build $VERSION $RB_RUBIES_DIR/$VERSION"
      return 1
    else
      # an installed version requested, activate it
      _rb_unset_env
      set_state "$VERSION" "$SOURCE"
      set_env
      MSG="Activated $VERSION"
    fi
    info "$MSG ($SOURCE)"
  fi

}

rb () {
  reset () { _rb_unset_env; _rb_activate $@; }
  cmd_arg="$1"
  pushd "$(readlink `which rb`)/.." > /dev/null; cmd_bin="$PWD/rb-$cmd_arg"; popd > /dev/null
  if [ -x $cmd_bin ]; then
    shift 1; eval "$cmd_bin $@"
  else
    if [ "$1" = "-v" ] || [ "$1" = "--version" ]; then echo "$RB_RELEASE"
    elif [ "$1" = "-h" ] || [ "$1" = "--help" ];  then eval "rb help"
    elif [ "$1" = "-f" ]; then reset $2
    elif [[ $1 =~ ^@ ]];  then reset $@
    elif [ -z $1 ];       then reset
    else echo "rb: no such command \`$cmd_arg'" >&2
    fi
  fi
}

rb $@
