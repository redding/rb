#!/usr/bin/env bash

export RB_RELEASE="1.0.5-test1"

[ -n "$RB_HOME_DIR"     ] || export RB_HOME_DIR="$HOME/.rb"
[ -n "$RB_RUBIES_DIR"   ] || export RB_RUBIES_DIR="$HOME/.rubies"
[ -n "$RB_VERSION_FILE" ] || export RB_VERSION_FILE=".ruby-version"
[ -n "$RB_RUBY_VERSION" ] || export RB_RUBY_VERSION=""
[ -n "$RB_RUBY_SOURCE"  ] || export RB_RUBY_SOURCE=""

_rb_path_remove () { export PATH="`echo $PATH | awk -v RS=: -v ORS=: '$0 != "'$1'"' | sed 's/:$//'`"; }

_rb_unset_env () {
  _rb_path_remove "$RB_RUBIES_DIR/$RUBY_VERSION/bin"
  _rb_path_remove "$RB_RUBIES_DIR/$RUBY_VERSION/lib/ruby/gems/bin"
  unset RUBY_VERSION RUBY_ROOT GEM_PATH GEM_HOME
  export RB_RUBY_VERSION="" RB_RUBY_SOURCE=""
}

_rb_activate () {
  local VERSION="$RB_RUBY_VERSION" SOURCE="$RB_RUBY_SOURCE" MSG VERSION_FILE
  warn () { echo -e "$1" >&2; }
  info () { warn "$1"; }
  set_env_var () { export $1="$2"; }
  unset_env_var () { unset $1; }
  path_prepend () { _rb_path_remove $1; set_env_var PATH "$1:$PATH"; }
  set_file_version () { [ -f "$1" ] && VERSION=`head -n 1 $1 | sed 's/ //g'` && SOURCE="from $1"; }
  search_pwd_and_parents_for () {
    path="$PWD" path_slashes=${PWD//[^\/]/} num_path_dirs="${#path_slashes}"
    for (( n=${num_path_dirs}; n>0; --n )) do
      test -e "$path/$RB_VERSION_FILE" && ORIG_OLDPWD="$OLDPWD" && pushd "$path" > /dev/null &&
        VERSION_FILE="$PWD/$RB_VERSION_FILE" && popd > /dev/null && OLDPWD="$ORIG_OLDPWD" && return
      path="$path/.."
    done
  }
  set_state () { export RB_RUBY_VERSION="$1" RB_RUBY_SOURCE="$2"; }
  set_env () {
    local v="$RB_RUBY_VERSION" dv="$RB_RUBIES_DIR/$RB_RUBY_VERSION"
    [ -h $dv ] && v=$(readlink -n "$dv" | sed 's/\/$//')
    export RUBY_VERSION="$v" RUBY_ROOT="$RB_RUBIES_DIR/$v"
    export GEM_HOME="$RUBY_ROOT/lib/ruby/gems" GEM_PATH="$RUBY_ROOT/lib/ruby/gems"
    path_prepend "$RUBY_ROOT/lib/ruby/gems/bin"
    path_prepend "$RUBY_ROOT/bin"
  }

  # get the requested version

  # from pwd search for a `.ruby-version` file, if present
  search_pwd_and_parents_for && set_file_version "$VERSION_FILE"
  # from cli args
  if [[ $1 =~ ^@ ]]; then
    # from @<VERSION> string
    VERSION=$1; VERSION=${VERSION:1}; SOURCE="from command line";
  elif [ -f "$1" ]; then
    # from file containing VERSION string
    local file="$1"
    [[ ! $1 =~ ^\/ ]] && file="$PWD/$file"
    set_file_version "$file"
  fi
  # from $RB_RUBIES_DIR/.ruby-version, if present
  [ -z "$VERSION" ] && set_file_version "$RB_RUBIES_DIR/$RB_VERSION_FILE"
  # default to the system version
  [ -z "$VERSION" ] && VERSION="system" && SOURCE="default"

  # apply the requested version, if needed

  if [ "$VERSION" != "$RB_RUBY_VERSION" ] || [ "$SOURCE" != "$RB_RUBY_SOURCE" ]; then
    if [[ "$VERSION" == "system" ]]; then
      # system version requested, activate it
      _rb_unset_env && set_state "$VERSION" "$SOURCE" && MSG="Activated (system) `ruby -v`"
    elif [ ! -e "$RB_RUBIES_DIR/$VERSION" ]; then
      # requested version not installed
      warn "$VERSION was requested ($SOURCE) but is not installed.\n\nInstall it with ruby-build:"
      warn "ruby-build $VERSION $RB_RUBIES_DIR/$VERSION"
      return 1
    else
      # an installed version requested, activate it
      _rb_unset_env && set_state "$VERSION" "$SOURCE" && set_env && MSG="Activated Ruby-$VERSION"
    fi
    [[ ! "$RB_QUIET_MODE" == "true" ]] && info "$MSG ($SOURCE)"
  fi
  return 0
}

_rb_auto_activate () { [[ "$PWD" != "$RB_PWD" ]] && export RB_PWD="$PWD" && _rb_activate; }

rb () {
  reset () { _rb_unset_env; _rb_activate $@; }
  local cmd_arg="$1" cmd_bin="$(dirname $(readlink `which rb`))/rb-$1"
  if [ -x "$cmd_bin" ]; then
    shift 1; eval "$cmd_bin $@"
  else
    if [ "$1" = "-v" ] || [ "$1" = "--version" ]; then echo "$RB_RELEASE"
    elif [ "$1" = "-h" ] || [ "$1" = "--help" ];  then eval "rb help"
    elif [ "$1" = "-f" ]; then reset $2
    elif [ "$1" = "@"  ]; then reset
    elif [[ $1 =~ ^@ ]];  then reset $@
    elif [ -z $1 ];       then eval "rb status"
    else echo "rb: no such command \`$cmd_arg'" >&2
    fi
  fi
}

rb $@
