#!/usr/bin/env bash

export RB_RELEASE="beta2"

[ -n "$RB_RUBIES_DIR"   ] || export RB_RUBIES_DIR="$HOME/.rubies"
[ -n "$RB_VERSION_FILE" ] || export RB_VERSION_FILE=".ruby-version"
[ -n "$RB_RUBY_VERSION" ] || export RB_RUBY_VERSION="system"
[ -n "$RB_RUBY_SOURCE"  ] || export RB_RUBY_SOURCE="system"

_rb_activate () {

  local VERSION SOURCE MSG PWD_AND_PARENTS_SEARCH_RESULT
  warn () { echo -e "$1" >&2; }
  info () { warn "$1"; }
  set_env_var () { export $1="$2"; }
  unset_env_var () { unset $1; }
  path_remove () { set_env_var PATH "`echo $PATH | awk -v RS=: -v ORS=: '$0 != "'$1'"' | sed 's/:$//'`"; }
  path_append () { path_remove $1; set_env_var PATH "$PATH:$1"; }
  path_prepend () { path_remove $1; set_env_var PATH "$1:$PATH"; }
  read_version_from_file () { if [ -f "$1" ]; then SOURCE="from $1"; VERSION=`head -n 1 $1 | sed 's/ //g'`; fi; }
  search_pwd_and_parents_for () {
    path_slashes=${PWD//[^\/]/}
    num_path_dirs="${#path_slashes}"
    path="$PWD"

    for (( n=${num_path_dirs}; n>0; --n )) do
      test -e "$path/$1" &&
        ORIG_OLDPWD="$OLDPWD" &&
        pushd "$path" > /dev/null &&
        PWD_AND_PARENTS_SEARCH_RESULT="$PWD/$1" &&
        popd > /dev/null &&
        OLDPWD="$ORIG_OLDPWD" &&
        return

      path="$path/.."
    done
  }
  reset_env () {
    path_remove "$RB_RUBIES_DIR/$RB_RUBY_VERSION/bin"
    path_remove "$RB_RUBIES_DIR/$RB_RUBY_VERSION/lib/ruby/gems/bin"
    unset_env_var GEM_PATH
    unset_env_var GEM_HOME
    set_env_var RB_RUBY_SOURCE "$SOURCE"
    set_env_var RB_RUBY_VERSION "$VERSION"
  }
  apply_version_to_env () {
    set_env_var GEM_HOME "$RB_RUBIES_DIR/$RB_RUBY_VERSION/lib/ruby/gems"
    set_env_var GEM_PATH "$RB_RUBIES_DIR/$RB_RUBY_VERSION/lib/ruby/gems"
    path_prepend "$RB_RUBIES_DIR/$RB_RUBY_VERSION/lib/ruby/gems/bin"
    path_prepend "$RB_RUBIES_DIR/$RB_RUBY_VERSION/bin"
  }

  # get the requested version

  if [[ $1 =~ ^@ ]]; then           # from @<VERSION> string
    SOURCE="from command line"; VERSION=$1; VERSION=${VERSION:1}
  elif [ -f "$1" ]; then            # from file containing VERSION string
    read_version_from_file "$1"
  fi
  if [ -z "$VERSION" ]; then        # from pwd search .ruby-version, if present
    search_pwd_and_parents_for "$RB_VERSION_FILE"
    read_version_from_file "$PWD_AND_PARENTS_SEARCH_RESULT"
  fi
  if [ -z "$VERSION" ]; then        # from $HOME/.ruby-version, if present
    read_version_from_file "$HOME/$RB_VERSION_FILE"
  fi
  if [ -z "$VERSION" ]; then        # default to the system version
    SOURCE="system"; VERSION="system"
  fi

  # apply the requested version, if needed

  if [ "$SOURCE" != "$RB_RUBY_SOURCE" ] || [ "$VERSION" != "$RB_RUBY_VERSION" ]; then
    if [[ "$VERSION" == "system" ]]; then            # system version requested, activate it
      reset_env; MSG="Activated system `ruby -v`"
    elif [ ! -e "$RB_RUBIES_DIR/$VERSION" ]; then    # requested version not installed
        warn "$VERSION was requested ($SOURCE) but is not installed.\n\nInstall it with ruby-build:"
        warn "ruby-build $VERSION $RB_RUBIES_DIR/$VERSION"
        return 1
    else                                             # an installed version requested, activate it
      reset_env; apply_version_to_env; MSG="Activated $VERSION"
    fi
    info "$MSG ($SOURCE)"
  fi

}

rb () {
  cmd_arg="$1"
  pushd "$(readlink `which rb`)/.." > /dev/null; cmd_bin="$PWD/rb-$cmd_arg"; popd > /dev/null
  if [ -x $cmd_bin ]; then
    shift 1; eval "$cmd_bin $@"
  else
    if [ "$1" = "-v" ] || [ "$1" = "--version" ]; then echo "$RB_RELEASE"
    elif [ "$1" = "-h" ] || [ "$1" = "--help" ];  then eval "rb-help"
    elif [[ $1 =~ ^@ ]]; then _rb_activate $@
    elif [ -z $1 ];      then _rb_activate
    else echo "rb: no such command \`$command_arg'" >&2
    fi
  fi
}

rb $@
