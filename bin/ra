#!/usr/bin/env bash

_ra_activate () {

  # locals

  local RA_ROOT="$HOME/.ra"
  local RUBIES_ROOT="$RA_ROOT/rubies"
  local VERSION_FILE=".ruby-version"

  local VERSION SOURCE COMMAND
  local MSG PWD_AND_PARENTS_SEARCH_RESULT


  # utility methods

  warn () { echo -e "$1" >&2; }
  info () { warn "$1"; }

  set_env_var () { export $1="$2"; }
  unset_env_var () { unset $1; }

  path_remove ()  {
    set_variable PATH "`echo $PATH | awk -v RS=: -v ORS=: '$0 != "'$1'"' | sed 's/:$//'`";
  }

  path_append ()  {
    path_remove $1; set_env_var PATH "$PATH:$1";
  }

  path_prepend () {
    path_remove $1; set_env_var PATH "$1:$PATH";
  }

  read_version_from_file () {
    if [ -f "$1" ]; then SOURCE="from $1"; VERSION=`head -n 1 $1`; fi;
  }

  search_pwd_and_parents_for () {
    path_slashes=${PWD//[^\/]/}
    num_path_dirs="${#path_slashes}"
    path="$PWD"

    for (( n=${num_path_dirs}; n>0; --n )) do
      test -e "$path/$1" &&
        ORIG_OLDPWD="$OLDPWD" &&
        pushd "$path" > /dev/null &&
        PWD_AND_PARENTS_SEARCH_RESULT="$PWD/$1" &&
        popd > /dev/null &&
        OLDPWD="$ORIG_OLDPWD" &&
        return

      path="$path/.."
    done
  }

  deactivate_current_version_env () {
    if [ $RA_RUBY_VERSION ]; then
      path_remove "$RUBIES_ROOT/$RA_RUBY_VERSION/bin"
      path_remove "$RUBIES_ROOT/$RA_RUBY_VERSION/lib/ruby/gems/bin"
      unset_env_var GEM_PATH
      unset_env_var GEM_HOME
      unset_env_var RA_RUBY_VERSION
    fi
  }

  activate_new_version_env () {
    set_env_var RA_RUBY_VERSION "$VERSION"
    set_env_var GEM_HOME "$RUBIES_ROOT/$RA_RUBY_VERSION/lib/ruby/gems"
    set_env_var GEM_PATH "$RUBIES_ROOT/$RA_RUBY_VERSION/lib/ruby/gems"
    path_prepend "$RUBIES_ROOT/$RA_RUBY_VERSION/lib/ruby/gems/bin"
    path_prepend "$RUBIES_ROOT/$RA_RUBY_VERSION/bin"
  }

  reset_to_version_env () {
    if [ ! -e $RUBIES_ROOT/$VERSION ]; then
      warn "Rubie $VERSION was requested, but is not installed. ($SOURCE)"
      warn "If you have ruby-build installed, you can install the requested version like this:\n"
      warn "ruby-build $VERSION \$HOME/.ra/rubies/$VERSION"
      return 1
    fi

    deactivate_current_version_env
    activate_new_version_env
    MSG="Activated $VERSION"
  }

  reset_to_system_env () {
    deactivate_current_version_env
    MSG="Activated system Ruby."
  }


  # action methods

  get_version_and_command_from_params_and_version_files () {
    # check for explicit version parameter
    if [[ $1 =~ ^@ ]]; then
      SOURCE="from command line"
      VERSION=$1; shift
      VERSION=${VERSION:1}
    fi

    # set command parameter
    COMMAND="$@"

    # if no version parameter, search pwd and its parents for a .ruby-version file
    search_pwd_and_parents_for "$VERSION_FILE"
    [ -n "$VERSION" ] || read_version_from_file "$PWD_AND_PARENTS_SEARCH_RESULT"

    # fall back to $HOME/.ruby-version, if present
    [ -n "$VERSION" ] || read_version_from_file "$HOME/$VERSION_FILE"

    # validate that a rubie was requested
    [ ! "$VERSION" ] && warn "Specify a ruby version to activate." && return
  }

  set_env_to_requested_version () {
    echo "$VERSION"
    if [[ "$VERSION" == "system" ]]; then
      reset_to_system_env
    else
      # only reset if the requested is different from the current
      if [ "$VERSION" != "$RA_RUBY_VERSION" ]; then reset_to_version_env; fi;
    fi
  }

  get_version_and_command_from_params_and_version_files "$@"
  set_env_to_requested_version

  # output the info msg, if present
  if [ ! -z "$MSG" ]; then info "$MSG ($SOURCE)"; fi;

  # execute the command, if given
  [ -n "$COMMAND" ] && eval $COMMAND
}
