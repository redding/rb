#!/usr/bin/env bash

RAA_RELEASE="20120920"

# Env

RAA_ROOT="$HOME/.raa"
RAA_RUBIES_DIR="rubies"

_raa_activate () {

  # locals

  local RAA_ROOT="$HOME/.raa"
  local RUBIES_ROOT="$RAA_ROOT/rubies"
  local VERSION_FILE=".ruby-version"

  local VERSION SOURCE COMMAND
  local MSG PWD_AND_PARENTS_SEARCH_RESULT


  # utility methods

  warn () { echo -e "$1" >&2; }
  info () { warn "$1"; }

  set_env_var () { export $1="$2"; }
  unset_env_var () { unset $1; }

  path_remove ()  {
    set_variable PATH "`echo $PATH | awk -v RS=: -v ORS=: '$0 != "'$1'"' | sed 's/:$//'`";
  }

  path_append ()  {
    path_remove $1; set_env_var PATH "$PATH:$1";
  }

  path_prepend () {
    path_remove $1; set_env_var PATH "$1:$PATH";
  }

  read_version_from_file () {
    if [ -f "$1" ]; then SOURCE="from $1"; VERSION=`head -n 1 $1`; fi;
  }

  search_pwd_and_parents_for () {
    path_slashes=${PWD//[^\/]/}
    num_path_dirs="${#path_slashes}"
    path="$PWD"

    for (( n=${num_path_dirs}; n>0; --n )) do
      test -e "$path/$1" &&
        ORIG_OLDPWD="$OLDPWD" &&
        pushd "$path" > /dev/null &&
        PWD_AND_PARENTS_SEARCH_RESULT="$PWD/$1" &&
        popd > /dev/null &&
        OLDPWD="$ORIG_OLDPWD" &&
        return

      path="$path/.."
    done
  }

  deactivate_current_version_env () {
    if [ $RAA_RUBY_VERSION ]; then
      path_remove "$RAA_ROOT/$RAA_RUBIES_DIR/$RAA_RUBY_VERSION/bin"
      path_remove "$RAA_ROOT/$RAA_RUBIES_DIR/$RAA_RUBY_VERSION/lib/ruby/gems/bin"
      unset_env_var GEM_PATH
      unset_env_var GEM_HOME
      unset_env_var RAA_RUBY_VERSION
    fi
  }

  activate_new_version_env () {
    set_env_var RAA_RUBY_VERSION "$VERSION"
    set_env_var GEM_HOME "$RAA_ROOT/$RAA_RUBIES_DIR/$RAA_RUBY_VERSION/lib/ruby/gems"
    set_env_var GEM_PATH "$RAA_ROOT/$RAA_RUBIES_DIR/$RAA_RUBY_VERSION/lib/ruby/gems"
    path_prepend "$RAA_ROOT/$RAA_RUBIES_DIR/$RAA_RUBY_VERSION/lib/ruby/gems/bin"
    path_prepend "$RAA_ROOT/$RAA_RUBIES_DIR/$RAA_RUBY_VERSION/bin"
  }

  reset_to_version_env () {
    if [ ! -e $RUBIES_ROOT/$VERSION ]; then
      warn "$VERSION was requested ($SOURCE)."
      warn "It is not installed - install it with ruby-build like this:\n"
      warn "ruby-build $VERSION $RAA_ROOT/$RAA_RUBIES_DIR/$VERSION"
      return 1
    fi

    deactivate_current_version_env
    activate_new_version_env
    MSG="Activated $VERSION"
  }

  reset_to_system_env () {
    deactivate_current_version_env
    MSG="Activated system `ruby -v`"
  }


  # action methods

  get_version_and_command_from_params_and_version_files () {
    # get explicit version parameter
    if [[ $1 =~ ^@ ]]; then
      SOURCE="from command line"
      VERSION=$1; shift
      VERSION=${VERSION:1}
    fi
    # get command parameter
    COMMAND="$@"

    # fallback to searching pwd and its parents for a .ruby-version file
    search_pwd_and_parents_for "$VERSION_FILE"
    [ -n "$VERSION" ] || read_version_from_file "$PWD_AND_PARENTS_SEARCH_RESULT"

    # fallback to the $HOME/.ruby-version, if present
    [ -n "$VERSION" ] || read_version_from_file "$HOME/$VERSION_FILE"

    # fallback to the system version
    VERSION="system"; SOURCE="no version requested"
  }

  set_env_to_requested_version () {
    if [[ "$VERSION" == "system" ]]; then
      reset_to_system_env
    elif [ "$VERSION" != "$RAA_RUBY_VERSION" ]; then
      reset_to_version_env
    fi
  }

  get_version_and_command_from_params_and_version_files "$@"
  set_env_to_requested_version

  # output the info msg, if present
  if [ ! -z "$MSG" ]; then info "$MSG ($SOURCE)"; fi;

  # execute the command, if given
  [ -n "$COMMAND" ] && eval $COMMAND
}

# CLI

if [ "$1" = "--help" ]; then

  cat <<USAGE
raa: The Ruby Auto Activator (release $RAA_RELEASE)
~~ Minimally Manage Multiple Rubies ~~

  Usage:
    raa [@<version>] [command]"
    raa --init [--auto]"
    raa --help"
    raa --version

  More Info:
    https://github.com/rootedwest/raa
USAGE
  exit 0

elif [ "$1" = "--version" ]; then

  echo "$RAA_RELEASE"
  exit 0

elif [ "$1" = "--init" ]; then

  # init code (to be run from shell startup script)
  # ie. eval "$(raa --init)"

  cat <<BASH_TAB_COMPLETION
if command -v complete >/dev/null 2>&1; then
  _raa_complete_version() {
    if [ -d "$RAA_ROOT/$RAA_RUBIES_DIR" ]; then
      cur="\${COMP_WORDS[COMP_CWORD]}"
      opts=\$(\\ls -1 $RAA_ROOT/$RAA_RUBIES_DIR | sed -e "s/^/@/")

      if [[ \$COMP_CWORD == 1 ]]; then
        COMPREPLY=( \$(compgen -W "\${opts} @system --init --help --version" -- \${cur}) )
        return 0
      fi

      if [[ \$COMP_CWORD == 2 ]]; then
        COMPREPLY=( \$(compgen -W "--auto" -- \${cur}) )
        return 0
      fi
    fi
  }
  complete -o nospace -F _raa_complete_version raa
fi
BASH_TAB_COMPLETION

  if [ "$2" = "--auto" ]; then

    # more init code - to be used in conjunction with the `--init` flag
    # ie. eval "$(raa --init --auto)"
    # (optional) auto mode (update ruby version as you change directories)

    cat <<AUTO_MODE
function cd() {
  builtin cd "\$@" && _raa_activate
}
source raa
AUTO_MODE
  fi

  exit 0

else
  _raa_activate $@
fi
